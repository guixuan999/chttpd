chttpd is a simple httpd implemented with golang, but initialized by a c program and also it's request handling is delegated to c program

-----------------------------------------------------------------------------------------------

build static linked app (stop updating this section since 2021-06-15)
1. build libapi.a (C source)
cd chttpd/c
gcc -Wall -c -o libapi.o api.c
ar rcs libapi.a libapi.o 

2. build chttpd.a (Go source)
cd chttpd
go build -buildmode=c-archive --ldflags '-extldflags "-static"' -o chttpd.a gx.io/cgo/chttpd

3. build chttpd (C source)
cd chttpd/c
cp api.h ../          # without this copy, you will get error: "api.h" not found, in the next step.
gcc -o chttpd main.c ../chttpd.a -L. -lpthread -lapi

4. And now you can run chttpd, enjoy!

-----------------------------------------------------------------------------------------------

build dynamic linked app (see also: run.sh)
1. build libcjson.so
cd c/cJSON
mkdir build
cd build
cmake ..
make

2. build libapi.so
cd ../../
mv cJSON/build/libcjson.so* ./
gcc -shared -o libapi.so api.c -I. -L. -lcjson -fPIC
cp api.h ../

3. build libchttpd.so
cd ..
LD_LIBRARY_PATH=./c go build -buildmode=c-shared -o libchttpd.so gx.io/cgo/chttpd

4. build chttpd (executable)
cd c
gcc -o chttpd  main.c -Wl,-rpath-link . -L. -L.. -lpthread -lapi -lchttpd
# or: LD_LIBRARY_PATH=. gcc -o chttpd  main.c -L. -L.. -lpthread -lapi -lchttpd
mv chttpd ../

5. run chttpd
cd ..
LD_LIBRARY_PATH=.:c ./chttpd
